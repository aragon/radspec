{"version":3,"sources":["../../src/helpers/tokenAmount.js"],"names":["eth","tokenAddress","amount","showSymbol","precision","amountBn","BN","decimals","symbol","ETH","token","Contract","ERC20_SYMBOL_DECIMALS_ABI","methods","call","err","ERC20_SYMBOL_BYTES32_ABI","formattedAmount","Number","type","value"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;eAEgBA,GAAD;AACb;;;;;;;;;AASA,OAAOC,YAAP,EAAqBC,MAArB,EAA6BC,UAAU,GAAG,IAA1C,EAAgDC,SAAS,GAAG,CAA5D,KAAkE;AAChE,QAAMC,QAAQ,GAAG,IAAIC,WAAJ,CAAOJ,MAAP,CAAjB;AAEA,MAAIK,QAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAIP,YAAY,KAAKQ,UAArB,EAA0B;AACxBF,IAAAA,QAAQ,GAAG,IAAID,WAAJ,CAAO,EAAP,CAAX;;AACA,QAAIH,UAAJ,EAAgB;AACdK,MAAAA,MAAM,GAAG,KAAT;AACD;AACF,GALD,MAKO;AACL,QAAIE,KAAK,GAAG,IAAIV,GAAG,CAACW,QAAR,CAAiBC,gCAAjB,EAA4CX,YAA5C,CAAZ;AAEAM,IAAAA,QAAQ,GAAG,IAAID,WAAJ,EAAO,MAAMI,KAAK,CAACG,OAAN,CAAcN,QAAd,GAAyBO,IAAzB,EAAb,EAAX;;AACA,QAAIX,UAAJ,EAAgB;AACd,UAAI;AACFK,QAAAA,MAAM,GAAG,OAAME,KAAK,CAACG,OAAN,CAAcL,MAAd,GAAuBM,IAAvB,EAAN,KAAuC,EAAhD;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACAL,QAAAA,KAAK,GAAG,IAAIV,GAAG,CAACW,QAAR,CAAiBK,+BAAjB,EAA2Cf,YAA3C,CAAR;AACAO,QAAAA,MAAM,GAAG,OAAME,KAAK,CAACG,OAAN,CAAcL,MAAd,GAAuBM,IAAvB,EAAN,KAAuC,EAAhD;AACAN,QAAAA,MAAM,GAAGA,MAAM,IAAI,uBAAOA,MAAP,CAAnB;AACD;AACF;AACF;;AAED,QAAMS,eAAe,GAAG,wBAASZ,QAAT,EAAmB,sBAAOE,QAAP,CAAnB,EAAqCW,MAAM,CAACd,SAAD,CAA3C,CAAxB;AAEA,SAAO;AACLe,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,KAAK,EAAEjB,UAAU,GAAI,GAAEc,eAAgB,IAAGT,MAAO,EAAhC,GAAoCS;AAFhD,GAAP;AAID,C","sourcesContent":["import BN from 'bn.js'\nimport { toUtf8 } from 'web3-utils'\nimport { ERC20_SYMBOL_BYTES32_ABI, ERC20_SYMBOL_DECIMALS_ABI, ETH } from './lib/token'\nimport { formatBN, tenPow } from './lib/formatBN'\n\nexport default (eth) =>\n  /**\n   * Format token amounts taking decimals into account\n   *\n   * @param {string} tokenAddress The address of the token\n   * @param {*} amount The absolute amount for the token quantity (wei)\n   * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n   * @param {*} [precision=2] The number of decimal places to format to\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (tokenAddress, amount, showSymbol = true, precision = 2) => {\n    const amountBn = new BN(amount)\n\n    let decimals\n    let symbol\n\n    if (tokenAddress === ETH) {\n      decimals = new BN(18)\n      if (showSymbol) {\n        symbol = 'ETH'\n      }\n    } else {\n      let token = new eth.Contract(ERC20_SYMBOL_DECIMALS_ABI, tokenAddress)\n\n      decimals = new BN(await token.methods.decimals().call())\n      if (showSymbol) {\n        try {\n          symbol = await token.methods.symbol().call() || ''\n        } catch (err) {\n          // Some tokens (e.g. DS-Token) use bytes32 for their symbol()\n          token = new eth.Contract(ERC20_SYMBOL_BYTES32_ABI, tokenAddress)\n          symbol = await token.methods.symbol().call() || ''\n          symbol = symbol && toUtf8(symbol)\n        }\n      }\n    }\n\n    const formattedAmount = formatBN(amountBn, tenPow(decimals), Number(precision))\n\n    return {\n      type: 'string',\n      value: showSymbol ? `${formattedAmount} ${symbol}` : formattedAmount\n    }\n  }\n"],"file":"tokenAmount.js"}