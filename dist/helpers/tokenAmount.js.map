{"version":3,"sources":["../../src/helpers/tokenAmount.js"],"names":["provider","tokenAddress","amount","showSymbol","precision","amountBn","BN","decimals","symbol","ETH","token","ethers","Contract","ERC20_SYMBOL_DECIMALS_ABI","functions","err","ERC20_SYMBOL_BYTES32_ABI","utils","toUtf8String","formattedAmount","Number","type","value"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAKA;;eAEeA,QAAQ;AACrB;;;;;;;;;AASA,OAAOC,YAAP,EAAqBC,MAArB,EAA6BC,UAAU,GAAG,IAA1C,EAAgDC,SAAS,GAAG,CAA5D,KAAkE;AAChE,QAAMC,QAAQ,GAAG,IAAIC,WAAJ,CAAOJ,MAAP,CAAjB;AAEA,MAAIK,QAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAIP,YAAY,KAAKQ,UAArB,EAA0B;AACxBF,IAAAA,QAAQ,GAAG,IAAID,WAAJ,CAAO,EAAP,CAAX;;AACA,QAAIH,UAAJ,EAAgB;AACdK,MAAAA,MAAM,GAAG,KAAT;AACD;AACF,GALD,MAKO;AACL,QAAIE,KAAK,GAAG,IAAIC,eAAOC,QAAX,CACRX,YADQ,EAERY,gCAFQ,EAGRb,QAHQ,CAAZ;AAMAO,IAAAA,QAAQ,GAAG,IAAID,WAAJ,EAAO,MAAMI,KAAK,CAACI,SAAN,CAAgBP,QAAhB,EAAb,EAAX;;AACA,QAAIJ,UAAJ,EAAgB;AACd,UAAI;AACFK,QAAAA,MAAM,GAAG,CAAC,MAAME,KAAK,CAACI,SAAN,CAAgBN,MAAhB,EAAP,KAAoC,EAA7C;AACD,OAFD,CAEE,OAAOO,GAAP,EAAY;AACZ;AACAL,QAAAA,KAAK,GAAG,IAAIC,eAAOC,QAAX,CACJX,YADI,EAEJe,+BAFI,EAGJhB,QAHI,CAAR;AAMAQ,QAAAA,MAAM,GAAG,CAAC,MAAME,KAAK,CAACI,SAAN,CAAgBN,MAAhB,EAAP,KAAoC,EAA7C;AACAA,QAAAA,MAAM,GAAGA,MAAM,IAAIG,eAAOM,KAAP,CAAaC,YAAb,CAA0BV,MAA1B,CAAnB;AACD;AACF;AACF;;AAED,QAAMW,eAAe,GAAG,wBACpBd,QADoB,EAEpB,sBAAOE,QAAP,CAFoB,EAGpBa,MAAM,CAAChB,SAAD,CAHc,CAAxB;AAMA,SAAO;AACLiB,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,KAAK,EAAEnB,UAAU,GAAI,GAAEgB,eAAgB,IAAGX,MAAO,EAAhC,GAAoCW;AAFhD,GAAP;AAID,C","sourcesContent":["import BN from 'bn.js';\nimport { ethers } from 'ethers';\nimport {\n  ERC20_SYMBOL_BYTES32_ABI,\n  ERC20_SYMBOL_DECIMALS_ABI,\n  ETH,\n} from './lib/token';\nimport { formatBN, tenPow } from './lib/formatBN';\n\nexport default provider =>\n  /**\n   * Format token amounts taking decimals into account\n   *\n   * @param {string} tokenAddress The address of the token\n   * @param {*} amount The absolute amount for the token quantity (wei)\n   * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n   * @param {*} [precision=2] The number of decimal places to format to\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (tokenAddress, amount, showSymbol = true, precision = 2) => {\n    const amountBn = new BN(amount);\n\n    let decimals;\n    let symbol;\n\n    if (tokenAddress === ETH) {\n      decimals = new BN(18);\n      if (showSymbol) {\n        symbol = 'ETH';\n      }\n    } else {\n      let token = new ethers.Contract(\n          tokenAddress,\n          ERC20_SYMBOL_DECIMALS_ABI,\n          provider\n      );\n\n      decimals = new BN(await token.functions.decimals());\n      if (showSymbol) {\n        try {\n          symbol = (await token.functions.symbol()) || '';\n        } catch (err) {\n          // Some tokens (e.g. DS-Token) use bytes32 for their symbol()\n          token = new ethers.Contract(\n              tokenAddress,\n              ERC20_SYMBOL_BYTES32_ABI,\n              provider\n          );\n\n          symbol = (await token.functions.symbol()) || '';\n          symbol = symbol && ethers.utils.toUtf8String(symbol);\n        }\n      }\n    }\n\n    const formattedAmount = formatBN(\n        amountBn,\n        tenPow(decimals),\n        Number(precision)\n    );\n\n    return {\n      type: 'string',\n      value: showSymbol ? `${formattedAmount} ${symbol}` : formattedAmount,\n    };\n  };\n"],"file":"tokenAmount.js"}