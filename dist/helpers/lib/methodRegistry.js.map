{"version":3,"sources":["../../../src/helpers/lib/methodRegistry.js"],"names":["REGISTRY_LOOKUP_ABI","REGISTRY_MAP","MethodRegistry","constructor","opts","eth","Eth","DEFAULT_ETH_NODE","network","initRegistry","net","getId","address","Error","registry","Contract","lookup","sigBytes","methods","entries","call","parse","signature","name","match","charAt","toUpperCase","slice","split","join","args","map","arg","type"],"mappings":";;;;;;;;;AAEA;;AACA;;AAHA;;AAKA;AACA,MAAMA,mBAAmB,GAAG,CAC1B;AACE,cAAY,IADd;AAEE,YAAU,CACR;AACE,YAAQ,EADV;AAEE,YAAQ;AAFV,GADQ,CAFZ;AAQE,UAAQ,SARV;AASE,aACA,CACE;AACE,YAAQ,EADV;AAEE,YAAQ;AAFV,GADF,CAVF;AAgBE,aAAW,KAhBb;AAiBE,UAAQ;AAjBV,CAD0B,CAA5B,C,CAsBA;;AACA,MAAMC,YAAY,GAAG;AACnB,KAAG;AADgB,CAArB;;AAIe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAAEC,IAAI,GAAG,EAAT,EAAa;AACtB,SAAKC,GAAL,GAAWD,IAAI,CAACC,GAAL,IAAY,IAAIC,gBAAJ,CAAQC,0BAAR,CAAvB;AACA,SAAKC,OAAL,GAAeJ,IAAI,CAACI,OAAL,IAAgB,GAA/B;AACD,GAJiC,CAMlC;;;AACA,QAAMC,YAAN,GAAsB;AACpB,QAAI,OAAM,KAAKJ,GAAL,CAASK,GAAT,CAAaC,KAAb,EAAN,MAA+B,GAAnC,EAAwC;AACtC,WAAKN,GAAL,GAAW,IAAIC,gBAAJ,CAAQC,0BAAR,CAAX;AACD;;AAED,UAAMK,OAAO,GAAGX,YAAY,CAAC,KAAKO,OAAN,CAA5B;;AAEA,QAAI,CAACI,OAAL,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAKC,QAAL,GAAgB,IAAI,KAAKT,GAAL,CAASU,QAAb,CAAsBf,mBAAtB,EAA2CY,OAA3C,CAAhB;AACD;;AAED,QAAMI,MAAN,CAAcC,QAAd,EAAwB;AACtB,QAAI,CAAC,KAAKH,QAAV,EAAoB;AAClB,YAAM,KAAKL,YAAL,EAAN;AACD;;AAED,WAAO,KAAKK,QAAL,CAAcI,OAAd,CAAsBC,OAAtB,CAA8BF,QAA9B,EAAwCG,IAAxC,EAAP;AACD;;AAEDC,EAAAA,KAAK,CAAEC,SAAF,EAAa;AAChB;AACA,QAAIC,IAAI,GAAGD,SAAS,CAACE,KAAV,CAAgB,WAAhB,EAA6B,CAA7B,CAAX;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BH,IAAI,CAACI,KAAL,CAAW,CAAX,EACnCC,KADmC,CAC7B,WAD6B,EAChBC,IADgB,CACX,GADW,CAAtC;AAGA,UAAMC,IAAI,GAAGR,SAAS,CAACE,KAAV,CAAgB,QAAhB,EAA0B,CAA1B,EAA6BG,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,EAA0CC,KAA1C,CAAgD,GAAhD,CAAb;AAEA,WAAO;AACLL,MAAAA,IADK;AAELO,MAAAA,IAAI,EAAEA,IAAI,CAACC,GAAL,CAAUC,GAAD,IAAS;AAAE,eAAO;AAAEC,UAAAA,IAAI,EAAED;AAAR,SAAP;AAAsB,OAA1C;AAFD,KAAP;AAID;;AAzCiC","sourcesContent":["// From: https://github.com/danfinlay/eth-method-registry\n\nimport Eth from 'web3-eth'\nimport { DEFAULT_ETH_NODE } from '../../defaults'\n\n/* eslint-disable key-spacing, quotes */\nconst REGISTRY_LOOKUP_ABI = [\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\"\n      }\n    ],\n    \"name\": \"entries\",\n    \"outputs\":\n    [\n      {\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"type\": \"function\"\n  }\n]\n\n// networkId -> registry address\nconst REGISTRY_MAP = {\n  1: '0x44691B39d1a75dC4E0A0346CBB15E310e6ED1E86'\n}\n\nexport default class MethodRegistry {\n  constructor (opts = {}) {\n    this.eth = opts.eth || new Eth(DEFAULT_ETH_NODE)\n    this.network = opts.network || '1'\n  }\n\n  // !!! This function can mutate `this.eth`\n  async initRegistry () {\n    if (await this.eth.net.getId() !== '1') {\n      this.eth = new Eth(DEFAULT_ETH_NODE)\n    }\n\n    const address = REGISTRY_MAP[this.network]\n\n    if (!address) {\n      throw new Error('No method registry found on the requested network.')\n    }\n\n    this.registry = new this.eth.Contract(REGISTRY_LOOKUP_ABI, address)\n  }\n\n  async lookup (sigBytes) {\n    if (!this.registry) {\n      await this.initRegistry()\n    }\n\n    return this.registry.methods.entries(sigBytes).call()\n  }\n\n  parse (signature) {\n    // TODO: Throw if there are unknown types in the signature or there if is any chars after the closing parenthesis\n    let name = signature.match(/^.+(?=\\()/)[0]\n    name = name.charAt(0).toUpperCase() + name.slice(1)\n      .split(/(?=[A-Z])/).join(' ')\n\n    const args = signature.match(/\\(.+\\)/)[0].slice(1, -1).split(',')\n\n    return {\n      name,\n      args: args.map((arg) => { return { type: arg } })\n    }\n  }\n}\n"],"file":"methodRegistry.js"}