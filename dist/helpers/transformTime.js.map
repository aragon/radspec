{"version":3,"sources":["../../src/helpers/transformTime.js"],"names":["BEST_UNIT","ADD_UNIT_FN","Map","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addYears","DISALLOWED_FROM_UNITS","Set","time","toUnit","fromUnit","has","Error","addTime","get","zeroDate","Date","duration","Number","type","value","unit"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,SAAS,GAAG,MAAlB;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,CAAC,aAAD,EAAgBC,wBAAhB,CAD0B,EAE1B,CAAC,QAAD,EAAWC,mBAAX,CAF0B,EAG1B,CAAC,QAAD,EAAWC,mBAAX,CAH0B,EAI1B,CAAC,MAAD,EAASC,iBAAT,CAJ0B,EAK1B,CAAC,KAAD,EAAQC,gBAAR,CAL0B,EAM1B,CAAC,MAAD,EAASC,iBAAT,CAN0B,EAO1B,CAAC,OAAD,EAAUC,kBAAV,CAP0B,EAQ1B,CAAC,MAAD,EAASC,iBAAT,CAR0B,CAAR,CAApB;AAWA,MAAMC,qBAAqB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,aAAD,CAAR,CAA9B;;eAEe;AACb;;;;;;;;;AASA,OAAOC,IAAP,EAAaC,MAAM,GAAGd,SAAtB,EAAiCe,QAAQ,GAAG,QAA5C,KAAyD;AACvD,MAAIJ,qBAAqB,CAACK,GAAtB,CAA0BD,QAA1B,KAAuC,CAACd,WAAW,CAACe,GAAZ,CAAgBD,QAAhB,CAA5C,EAAuE;AACrE,UAAM,IAAIE,KAAJ,CACD,8BAA6BF,QAAS,kCADrC,CAAN;AAGD;;AAED,MAAID,MAAM,KAAKd,SAAX,IAAwB,CAACC,WAAW,CAACe,GAAZ,CAAgBF,MAAhB,CAA7B,EAAsD;AACpD,UAAM,IAAIG,KAAJ,CACD,8BAA6BH,MAAO,gCADnC,CAAN;AAGD;;AAED,QAAMI,OAAO,GAAGjB,WAAW,CAACkB,GAAZ,CAAgBJ,QAAhB,CAAhB;AAEA,QAAMK,QAAQ,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAjB;AACA,QAAMC,QAAQ,GAAGJ,OAAO,CAACE,QAAD,EAAWG,MAAM,CAACV,IAAD,CAAjB,CAAxB;AAEA,SAAO;AACLW,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,KAAK,EAAE,mCACHL,QADG,EAEHE,QAFG,EAGLR,MAAM,KAAKd,SAAX,GAAuB;AAAE0B,MAAAA,IAAI,EAAEZ;AAAR,KAAvB,GAA0C,EAHrC;AAFF,GAAP;AAQD,C","sourcesContent":["import addMilliseconds from 'date-fns/addMilliseconds';\nimport addSeconds from 'date-fns/addSeconds';\nimport addMinutes from 'date-fns/addMinutes';\nimport addHours from 'date-fns/addHours';\nimport addDays from 'date-fns/addDays';\nimport addWeeks from 'date-fns/addWeeks';\nimport addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport formatDistanceStrict from 'date-fns/formatDistanceStrict';\n\nconst BEST_UNIT = 'best';\n\nconst ADD_UNIT_FN = new Map([\n  ['millisecond', addMilliseconds],\n  ['second', addSeconds],\n  ['minute', addMinutes],\n  ['hour', addHours],\n  ['day', addDays],\n  ['week', addWeeks],\n  ['month', addMonths],\n  ['year', addYears],\n]);\n\nconst DISALLOWED_FROM_UNITS = new Set(['millisecond']);\n\nexport default () =>\n  /**\n   * Transform between time units.\n   *\n   * @param {*} time The base time amount\n   * @param {string} [toUnit] The unit to convert the time to (supported units: 'second', 'minute', 'hour', 'day', 'week', 'month', 'year')\n   *                          Defaults to using the \"best\" unit\n   * @param {string} [fromUnit='second'] The unit to convert the time from (supported units: 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year')\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (time, toUnit = BEST_UNIT, fromUnit = 'second') => {\n    if (DISALLOWED_FROM_UNITS.has(fromUnit) || !ADD_UNIT_FN.has(fromUnit)) {\n      throw new Error(\n          `@transformTime: Time unit '${fromUnit}' is not supported as a fromUnit`\n      );\n    }\n\n    if (toUnit !== BEST_UNIT && !ADD_UNIT_FN.has(toUnit)) {\n      throw new Error(\n          `@transformTime: Time unit '${toUnit}' is not supported as a toUnit`\n      );\n    }\n\n    const addTime = ADD_UNIT_FN.get(fromUnit);\n\n    const zeroDate = new Date(0);\n    const duration = addTime(zeroDate, Number(time));\n\n    return {\n      type: 'string',\n      value: formatDistanceStrict(\n          zeroDate,\n          duration,\n        toUnit !== BEST_UNIT ? { unit: toUnit } : {}\n      ),\n    };\n  };\n"],"file":"transformTime.js"}