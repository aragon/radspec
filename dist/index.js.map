{"version":3,"sources":["../src/index.js"],"names":["evaluate","source","call","userHelpers","options","methodId","transaction","data","substr","method","abi","find","type","ABI","encodeFunctionSignature","parameterValues","decodeParameters","inputs","parameters","reduce","input","Object","assign","name","value","availableHelpers","defaultHelpers","to"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;AACA;;AACA;;AAoFA;;AACA;;AAnGA;;;;;;AAKA;;;;AAIA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAASA,QAAT,CAAmBC,MAAnB,EAA2BC,IAA3B,EAAiC,OAAmC,EAApE,EAAwE;AAAA,MAAvC;AAAEC,IAAAA,WAAW,GAAG;AAAhB,GAAuC;AAAA,MAAhBC,OAAgB;AACtE;AACA,QAAMC,QAAQ,GAAGH,IAAI,CAACI,WAAL,CAAiBC,IAAjB,CAAsBC,MAAtB,CAA6B,CAA7B,EAAgC,EAAhC,CAAjB,CAFsE,CAItE;;AACA,QAAMC,MAAM,GAAGP,IAAI,CAACQ,GAAL,CAASC,IAAT,CAAeD,GAAD,IAC3BA,GAAG,CAACE,IAAJ,KAAa,UAAb,IACAP,QAAQ,KAAKQ,oBAAIC,uBAAJ,CAA4BJ,GAA5B,CAFA,CAAf,CALsE,CAStE;;AACA,QAAMK,eAAe,GAAGF,oBAAIG,gBAAJ,CACtBP,MAAM,CAACQ,MADe,EAEtB,OAAOf,IAAI,CAACI,WAAL,CAAiBC,IAAjB,CAAsBC,MAAtB,CAA6B,EAA7B,CAFe,CAAxB;;AAIA,QAAMU,UAAU,GAAGT,MAAM,CAACQ,MAAP,CAAcE,MAAd,CAAqB,CAACD,UAAD,EAAaE,KAAb,KACtCC,MAAM,CAACC,MAAP,CACEJ,UADF,EACc;AACV,KAACE,KAAK,CAACG,IAAP,GAAc;AACZX,MAAAA,IAAI,EAAEQ,KAAK,CAACR,IADA;AAEZY,MAAAA,KAAK,EAAET,eAAe,CAACK,KAAK,CAACG,IAAP;AAFV;AADJ,GADd,CADiB,EAQd,EARc,CAAnB;AAUA,QAAME,gBAAgB,mCAAQC,uBAAR,EAA2BvB,WAA3B,CAAtB,CAxBsE,CA0BtE;;AACA,SAAO,sBACLF,MADK,EAELiB,UAFK,kCAIAd,OAJA;AAKHqB,IAAAA,gBALG;AAMHE,IAAAA,EAAE,EAAEzB,IAAI,CAACI,WAAL,CAAiBqB;AANlB,KAAP;AASD","sourcesContent":["/**\n * @typedef {Object} Binding\n * @property {string} type The type of the binding (a valid Radspec type)\n * @property {*} value The value of the binding\n */\n/**\n * @typedef {Object.<string, Binding>} Bindings\n */\n\n/**\n * @module radspec\n */\nimport ABI from 'web3-eth-abi'\nimport { defaultHelpers } from './helpers'\nimport { evaluateRaw } from './lib'\n\n/**\n * Evaluate a radspec expression (`source`) for a transaction (`call`)\n *\n * @example\n * import radspec from 'radspec'\n *\n * const expression = 'Will multiply `a` by 7 and return `a * 7`.'\n * const call = {\n *   abi: [{\n *     name: 'multiply',\n *     constant: false,\n *     type: 'function',\n *     inputs: [{\n *       name: 'a',\n *       type: 'uint256'\n *     }],\n *     outputs: [{\n *       name: 'd',\n *       type: 'uint256'\n *     }]\n *   }],\n *   transaction: {\n *     to: '0x8521742d3f456bd237e312d6e30724960f72517a',\n *     data: '0xc6888fa1000000000000000000000000000000000000000000000000000000000000007a'\n *   }\n * }\n *\n * radspec.evaluate(expression, call)\n *   .then(console.log) // => \"Will multiply 122 by 7 and return 854.\"\n * @param {string} source The radspec expression\n * @param {Object} call The call that determines the bindings for this evaluation\n * @param {Array} call.abi The ABI used to decode the transaction data\n * @param {Object} call.transaction The transaction to decode for this evaluation\n * @param {string} call.transaction.to The destination address for this transaction\n * @param {string} call.transaction.data The transaction data\n * @param {?Object} options An options object\n * @param {?Web3} options.eth Web3 instance (used over options.ethNode)\n * @param {?string} options.ethNode The URL to an Ethereum node\n * @param {?Object} options.userHelpers User defined helpers\n * @return {Promise<string>} The result of the evaluation\n */\nfunction evaluate (source, call, { userHelpers = {}, ...options } = {}) {\n  // Get method ID\n  const methodId = call.transaction.data.substr(0, 10)\n\n  // Find method ABI\n  const method = call.abi.find((abi) =>\n    abi.type === 'function' &&\n    methodId === ABI.encodeFunctionSignature(abi))\n\n  // Decode parameters\n  const parameterValues = ABI.decodeParameters(\n    method.inputs,\n    '0x' + call.transaction.data.substr(10)\n  )\n  const parameters = method.inputs.reduce((parameters, input) =>\n    Object.assign(\n      parameters, {\n        [input.name]: {\n          type: input.type,\n          value: parameterValues[input.name]\n        }\n      }\n    ), {})\n\n  const availableHelpers = { ...defaultHelpers, ...userHelpers }\n\n  // Evaluate expression with bindings from the transaction data\n  return evaluateRaw(\n    source,\n    parameters,\n    {\n      ...options,\n      availableHelpers,\n      to: call.transaction.to\n    }\n  )\n}\n\nexport { evaluate, evaluateRaw }\n\n// Re-export some commonly used inner functionality\nexport { parse } from './parser'\nexport { scan } from './scanner'\n"],"file":"index.js"}