{"version":3,"sources":["../../src/lib/index.js"],"names":["evaluateRaw","source","bindings","evaluatorOptions","then","parse","ast"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;AAcO,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,gBAAvC,EAAyD;AAC9D,SAAO,mBAAKF,MAAL,EACFG,IADE,CACGC,aADH,EAEFD,IAFE,CAEGE,GAAG,IAAI,yBAASA,GAAT,EAAcJ,QAAd,EAAwBC,gBAAxB,CAFV,CAAP;AAGD","sourcesContent":["import { evaluate } from '../evaluator';\nimport { parse } from '../parser';\nimport { scan } from '../scanner';\n\n/**\n * Evaluate a radspec expression with manual bindings.\n *\n * @example\n * import radspec from 'radspec'\n *\n * radspec.evaluateRaw('a is `a`', {\n *   a: { type: 'int256', value: 10 }\n * }).then(console.log)\n * @param  {string} source The radspec expression\n * @param  {Bindings} bindings An object of bindings and their values\n * @param {?Object} evaluatorOptions An options object for the evaluator (see Evaluator)\n * @return {Promise<string>} The result of the evaluation\n */\nexport function evaluateRaw(source, bindings, evaluatorOptions) {\n  return scan(source)\n      .then(parse)\n      .then(ast => evaluate(ast, bindings, evaluatorOptions));\n}\n"],"file":"index.js"}